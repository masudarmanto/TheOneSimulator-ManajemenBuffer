package routing;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import core.Connection;
import core.DTNHost;
import core.Message;
import core.Settings;
import core.SettingsError;
import core.SimClock;

public class SnWPriorityBuffer extends ActiveRouter {
	/** identifier for the initial number of copies setting ({@value})*/ 
	public static final String NROF_COPIES = "nrofCopies";
	/** identifier for the binary-mode setting ({@value})*/ 
	public static final String BINARY_MODE = "binaryMode";
	/** SprayAndWait router's settings name space ({@value})*/ 
	public static final String SPRAYANDWAIT_NS = "SprayAndWaitRouter";
	/** Message property key */
	public static final String MSG_COUNT_PROPERTY = SPRAYANDWAIT_NS + "." +
		"copies";
	
	public static final String MESSAGE_NS = "Message";
	public static final String MSG_STATUS_PROPERTY = MESSAGE_NS + "." +
		"status";
	
	public static final String PRIORITY_MODE = "priorityMode";
	public static final int NONE = 1;
	public static final int FIFO = 2;
	public static final int SMT = 3;
		
	protected int initialNrofCopies;
	protected boolean isBinary;
	private int priority;

	public SnWPriorityBuffer(Settings s) {
		super(s);
		Settings snwSettings = new Settings(SPRAYANDWAIT_NS);
		
		initialNrofCopies = snwSettings.getInt(NROF_COPIES);
		isBinary = snwSettings.getBoolean( BINARY_MODE);
		
		if (snwSettings.contains(PRIORITY_MODE)) {
			this.priority = snwSettings.getInt(PRIORITY_MODE);
			if (priority < 1 || priority > 3) {
				throw new SettingsError("Invalid value for " + 
						snwSettings.getFullPropertyName(PRIORITY_MODE));
			}
		}
		else {
			priority = NONE;
		
		}
	}
	
	/**
	 * Copy constructor.
	 * @param r The router prototype where setting values are copied from
	 */
	protected SnWPriorityBuffer(SnWPriorityBuffer r) {
		super(r);
		this.initialNrofCopies = r.initialNrofCopies;
		this.isBinary = r.isBinary;
		this.priority = r.priority;
	}
	
	@Override
	public int receiveMessage(Message m, DTNHost from) {
		return super.receiveMessage(m, from);
	}
	
	@Override
	public Message messageTransferred(String id, DTNHost from) {
		Message msg = super.messageTransferred(id, from);
		Integer nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		
		assert nrofCopies != null : "Not a SnW message: " + msg;
		
		if (isBinary) {
			/* in binary S'n'W the receiving node gets ceil(n/2) copies */
			nrofCopies = (int)Math.ceil(nrofCopies/2.0);
		}
		else {
			/* in standard S'n'W the receiving node gets only single copy */
			nrofCopies = 1;
		}
		
		msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
		return msg;
	}
	
	@Override 
	public boolean createNewMessage(Message msg) {
		makeRoomForNewMessage(msg.getSize());

		msg.setTtl(this.msgTtl);
		msg.addProperty(MSG_COUNT_PROPERTY, new Integer(initialNrofCopies));
		addToMessages(msg, true);
		//System.out.println(String.format("%.2f", SimClock.getTime())+" Node: "+super.getHost()+" | Message created | id:"+msg.getId()+"("+msg.getFrom()+" -> "+msg.getTo()+") | size:"+msg.getSize()+" | Hop-Count:"+msg.getHopCount()+" | TTL:"+msg.getTtl());
		return true;
	}
	
	@Override
	public void update() {
		super.update();
		if (!canStartTransfer() || isTransferring()) {
			return; // nothing to transfer or is currently transferring 
		}

		/* try messages that could be delivered to final recipient */
		if (exchangeDeliverableMessages() != null) {
			return;
		}
		
		/* create a list of SAWMessages that have copies left to distribute */
		//List<Message> copiesLeft = sortModeTtl(sortMode(getMessagesWithCopiesLeft()));
		List<Message> copiesLeft = getMessagesWithCopiesLeft();
		if (copiesLeft.size() > 0) {
			/* try to send those messages */
			this.tryMessagesToConnections(copiesLeft, getConnections());
			return;
		}
	}
	
	/**
	 * Creates and returns a list of messages this router is currently
	 * carrying and still has copies left to distribute (nrof copies > 1).
	 * @return A list of messages that have copies left
	 */
	protected List<Message> getMessagesWithCopiesLeft() {
		List<Message> list = new ArrayList<Message>();

		for (Message m : getMessageCollection()) {
			Integer nrofCopies = (Integer)m.getProperty(MSG_COUNT_PROPERTY);
			assert nrofCopies != null : "SnW message " + m + " didn't have " +
				"nrof copies property!";
			if (nrofCopies > 1) {
				list.add(m);
			}
		}
		
		Collections.sort(list, new DataChainedComparator(
				new DataHopCountComparator(),
				new DataTtlComparator())
		);
		if(list.size() != 0){
			System.out.print("Node: "+super.getHost()+" | Sorted List = ");
			for(int i = 0; i < list.size(); i++) {
				Message m = (Message) list.get(i);
		        System.out.print(m.getId()+"("+m.getHopCount()+","+m.getTtl()+");");
		    }
			System.out.println("");
		}
		return list;
	}
	
	/**
	 * Called just before a transfer is finalized (by 
	 * {@link ActiveRouter#update()}).
	 * Reduces the number of copies we have left for a message. 
	 * In binary Spray and Wait, sending host is left with floor(n/2) copies,
	 * but in standard mode, nrof copies left is reduced by one. 
	 */
	@Override
	protected void transferDone(Connection con) {
		Integer nrofCopies;
		String msgId = con.getMessage().getId();
		/* get this router's copy of the message */
		Message msg = getMessage(msgId);

		if (msg == null) { // message has been dropped from the buffer after..
			return; // ..start of transfer -> no need to reduce amount of copies
		}
		
		/* reduce the amount of copies left */
		nrofCopies = (Integer)msg.getProperty(MSG_COUNT_PROPERTY);
		if (isBinary) { 
			nrofCopies /= 2;
		}
		else {
			nrofCopies--;
		}
		msg.updateProperty(MSG_COUNT_PROPERTY, nrofCopies);
	}
	
	@Override
	public SnWPriorityBuffer replicate() {
		return new SnWPriorityBuffer(this);
	}
}
